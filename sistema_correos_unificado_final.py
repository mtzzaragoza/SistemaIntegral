import streamlit as st
import pandas as pd
import smtplib
from email.message import EmailMessage
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
import mimetypes
import re
from datetime import datetime, timedelta
import time

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Sistema Integral de Correos Acad√©micos", 
    page_icon="üìß",
    layout="wide"
)

# T√≠tulo principal
st.title("üìß Sistema Integral de Correos Acad√©micos")
st.markdown("**UVEG & NovaUniversitas - Plataforma Unificada**")

# Crear pesta√±as principales
tab1, tab2, tab3 = st.tabs([
    "üéØ Sistema Inteligente (UVEG/Nova)", 
    "üìß Sistema de Env√≠o Masivo (Pr√°cticas)",
    "üéì Sistema Bienvenida (NovaUniversitas)"
])

# =====================================================
# TAB 1: SISTEMA INTELIGENTE (UVEG & NOVAUNIVERSITAS)
# =====================================================

with tab1:
    st.header("üéØ Sistema Inteligente de Seguimiento Acad√©mico")
    st.markdown("*An√°lisis autom√°tico y env√≠o personalizado por progreso acad√©mico*")
    
    # Configuraci√≥n del remitente (se obtiene din√°micamente)
    def obtener_credenciales():
        """Funci√≥n para obtener credenciales de forma segura"""
        st.subheader("üîê Configuraci√≥n de Credenciales de Correo")
        
        with st.form("credenciales_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                remitente = st.text_input(
                    "üìß Correo electr√≥nico:",
                    placeholder="tu_correo@gmail.com",
                    help="Debe ser una cuenta de Gmail con 2FA activado"
                )
            
            with col2:
                clave_app = st.text_input(
                    "üîë Contrase√±a de aplicaci√≥n:",
                    type="password",
                    placeholder="abcd efgh ijkl mnop",
                    help="Contrase√±a de 16 caracteres generada por Gmail"
                )
            
            # Informaci√≥n de ayuda
            with st.expander("‚ÑπÔ∏è ¬øC√≥mo generar una contrase√±a de aplicaci√≥n?"):
                st.markdown("""
                ### Pasos para generar contrase√±a de aplicaci√≥n:
                
                1. **Activar 2FA**: Ve a [myaccount.google.com](https://myaccount.google.com) ‚Üí Seguridad ‚Üí Verificaci√≥n en 2 pasos
                2. **Generar contrase√±a**: En la misma secci√≥n ‚Üí Contrase√±as de aplicaci√≥n
                3. **Seleccionar**: App = "Correo", Dispositivo = "Otro (personalizado)"
                4. **Nombre**: "Sistema Correos Acad√©micos"
                5. **Copiar**: La contrase√±a de 16 caracteres que aparece
                
                ‚ö†Ô∏è **Importante**: Nunca uses tu contrase√±a normal de Gmail
                """)
            
            submitted = st.form_submit_button("üîì Configurar Credenciales", type="primary")
            
            if submitted:
                if remitente and clave_app:
                    # Validar formato de email
                    if "@" in remitente and "." in remitente:
                        # Validar que sea Gmail (opcional, puedes quitar esta validaci√≥n)
                        if "gmail.com" in remitente or "gmail" in remitente.lower():
                            return remitente, clave_app
                        else:
                            st.warning("‚ö†Ô∏è Este sistema est√° optimizado para Gmail. ¬øEst√°s seguro que es correcto?")
                            return remitente, clave_app
                    else:
                        st.error("‚ùå Formato de email inv√°lido")
                        return None, None
                else:
                    st.error("‚ùå Por favor completa ambos campos")
                    return None, None
        
        return None, None

    # Obtener credenciales al inicio
    if 'credenciales_configuradas_tab1' not in st.session_state:
        st.session_state.credenciales_configuradas_tab1 = False
        st.session_state.remitente_tab1 = None
        st.session_state.clave_app_tab1 = None

    # Mostrar formulario de credenciales si no est√°n configuradas
    if not st.session_state.credenciales_configuradas_tab1:
        remitente, clave_app = obtener_credenciales()
        
        if remitente and clave_app:
            # Probar las credenciales
            with st.spinner("üß™ Verificando credenciales..."):
                try:
                    # Intento de conexi√≥n para validar
                    server = smtplib.SMTP_SSL("smtp.gmail.com", 465, timeout=10)
                    server.login(remitente, clave_app)
                    server.quit()
                    
                    # Si llegamos aqu√≠, las credenciales son correctas
                    st.session_state.credenciales_configuradas_tab1 = True
                    st.session_state.remitente_tab1 = remitente
                    st.session_state.clave_app_tab1 = clave_app
                    st.success("‚úÖ ¬°Credenciales verificadas correctamente!")
                    st.balloons()
                    time.sleep(1)
                    st.rerun()
                    
                except Exception as e:
                    st.error(f"‚ùå Error de autenticaci√≥n: {str(e)}")
                    st.markdown("""
                    **Posibles soluciones:**
                    - Verifica que tengas 2FA activado en Gmail
                    - Aseg√∫rate de usar una contrase√±a de aplicaci√≥n (no tu contrase√±a normal)
                    - Revisa que no haya espacios extra en la contrase√±a
                    - Intenta generar una nueva contrase√±a de aplicaci√≥n
                    """)
        
        # Detener la ejecuci√≥n hasta que se configuren las credenciales
        st.stop()

    else:
        # Mostrar credenciales configuradas y opci√≥n para cambiar
        col1, col2 = st.columns([3, 1])
        
        with col1:
            st.success(f"‚úÖ **Credenciales configuradas** - Remitente: {st.session_state.remitente_tab1}")
        
        with col2:
            if st.button("üîÑ Cambiar Credenciales", key="cambiar_cred_tab1"):
                st.session_state.credenciales_configuradas_tab1 = False
                st.session_state.remitente_tab1 = None
                st.session_state.clave_app_tab1 = None
                st.rerun()

    # Usar las credenciales guardadas
    REMITENTE = st.session_state.remitente_tab1
    CLAVE_APP = st.session_state.clave_app_tab1

    # Inicializar estado de sesi√≥n para tab1
    if 'historial_envios_tab1' not in st.session_state:
        st.session_state.historial_envios_tab1 = []
    if 'analisis_generado_tab1' not in st.session_state:
        st.session_state.analisis_generado_tab1 = False
    if 'datos_estudiantes_tab1' not in st.session_state:
        st.session_state.datos_estudiantes_tab1 = None
    if 'plantillas_editadas_tab1' not in st.session_state:
        st.session_state.plantillas_editadas_tab1 = {}

    # Configuraciones por instituci√≥n
    CONFIGURACIONES_INSTITUCIONES = {
        "uveg": {
            "nombre": "UVEG",
            "columnas_actividades": [
                "Paquete SCORM:R1. Conversiones entre sistemas num√©ricos (Real)",
                "Paquete SCORM:R2. Operaciones aritm√©ticas con sistema binario, octal y hexadecimal (Real)",
                "Tarea:R3. Operaciones con conjuntos y su representaci√≥n (Real)",
                "Tarea:R4. Proposiciones l√≥gicas (Real)",
                "Paquete SCORM:R5. Operadores l√≥gicos y tablas de verdad (Real)",
                "Paquete SCORM:R6. Relaciones y operaciones con relaciones (Real)",
                "Tarea:R7. Propiedades de las relaciones: representaci√≥n gr√°fica (Real)"
            ],
            "nombres_actividades": [
                "R1. Conversiones entre sistemas num√©ricos",
                "R2. Operaciones aritm√©ticas con sistema binario, octal y hexadecimal",
                "R3. Operaciones con conjuntos y su representaci√≥n",
                "R4. Proposiciones l√≥gicas",
                "R5. Operadores l√≥gicos y tablas de verdad",
                "R6. Relaciones y operaciones con relaciones",
                "R7. Propiedades de las relaciones: representaci√≥n gr√°fica"
            ],
            "columnas_requeridas": ["Nombre", "Apellido(s)", "Correo Personal", "Direcci√≥n Email"],
            "modulo_default": "Matem√°ticas Discretas"
        },
        "novauniversitas": {
            "nombre": "NovaUniversitas",
            "columnas_actividades": [
                "Examen:Examen desaf√≠o 1 (Real)",
                "Examen:Examen desaf√≠o 2 (Real)",
                "Tarea:Evaluaci√≥n desaf√≠o 3 (Real)",
                "Tarea:Examen desaf√≠o 4 (Real)",
                "Examen:Evaluaci√≥n desaf√≠o 5 (Real)",
                "Examen:Evaluaci√≥n desaf√≠o 6 (Real)",
                "Foro:todo el foro Foro desaf√≠o 7 (Real)"
            ],
            "nombres_actividades": [
                "Desaf√≠o 1. Examen desaf√≠o 1",
                "Desaf√≠o 2. Examen desaf√≠o 2",
                "Desaf√≠o 3. Evaluaci√≥n desaf√≠o 3",
                "Desaf√≠o 4. Examen desaf√≠o 4",
                "Desaf√≠o 5. Evaluaci√≥n desaf√≠o 5",
                "Desaf√≠o 6. Evaluaci√≥n desaf√≠o 6",
                "Desaf√≠o 7. Foro desaf√≠o 7"
            ],
            "columnas_requeridas": ["Nombre", "Correo Personal", "Direcci√≥n Email"],
            "modulo_default": "Matem√°ticas Discretas"
        }
    }

    # Plantillas base por instituci√≥n
    PLANTILLAS_BASE = {
        "uveg": {
            "bienvenida": {
                "nombre": "üéì Bienvenida al M√≥dulo - UVEG",
                "asunto": "Bienvenida al m√≥dulo {modulo} - UVEG",
                "mensaje": """Buen d√≠a {nombre}.
					
Mi nombre es Juan Manuel y ser√© tu asesor virtual en el m√≥dulo "{modulo}" de la UVEG. Te doy la bienvenida al curso y quiero compartirte algunas recomendaciones para organizar tu avance.

Como sugerencia, te he marcado como meta entregar las primeras tres actividades antes del pr√≥ximo {fecha_meta} al mediod√≠a. Sin embargo, si comprendes bien los temas, puedes avanzar a tu propio ritmo, ya que el m√≥dulo tiene una duraci√≥n total de 24 d√≠as naturales.

El prop√≥sito de este mensaje es conocer si tienes alg√∫n inconveniente en este momento, como falta de tiempo, dificultades con las actividades, problemas de acceso a un dispositivo o Internet, o si simplemente tu estrategia de estudio no sigue el ritmo sugerido. Adem√°s, quiero que sepas que estar√© pendiente de tu desarrollo acad√©mico y disponible para cualquier duda que tengas.

A partir del martes, recibir√°s un correo con informaci√≥n sobre tu avance y para mantenernos en contacto. No es mi intenci√≥n abrumarte, sino brindarte el soporte necesario para que tengas √©xito en el curso.

Importante: Te invito a revisar la secci√≥n "AVISOS" en tu aula virtual para estar al tanto de cualquier informaci√≥n relevante.

Por √∫ltimo tenemos una cita este {fecha_sesion} a las {hora_sesion} horas, sesi√≥n s√≠ncrona para resolver dudas. El enlace lo encuentras dentro de tu aula virtual.

Te pido me confirmes de recibido este correo.

¬°Mucho √©xito en el m√≥dulo! Estoy aqu√≠ para ayudarte.

Dr. Juan Manuel Mart√≠nez Zaragoza"""
            },
            
            "seguimiento_sin_acceso": {
                "nombre": "‚ö†Ô∏è Seguimiento - Sin Acceso - UVEG",
                "asunto": "Seguimiento {modulo} - Semana {semana} - UVEG",
                "mensaje": """Buen d√≠a {nombre}.
					
Mi nombre es Juan Manuel y soy tu asesor virtual en el m√≥dulo de "{modulo}" de la UVEG, en este momento estamos iniciando la {semana} semana del m√≥dulo, solo hemos avanzado algunos retos, con lo cual no presentas un gran atraso, te invito a que inicies tus actividades dentro de la plataforma (https://campus.uveg.edu.mx) y si tienes alguna duda con toda confianza me puedes contactar ya sea por este medio, por el mensajero de la plataforma o xxx por whatsapp.

Agradecer√≠a pudieras comentarme la situaci√≥n por la cual no has accedido al m√≥dulo, espero todo se encuentre bien.

Dr. Juan Manuel Mart√≠nez Zaragoza"""
            },
            
            "seguimiento_atraso": {
                "nombre": "üìã Seguimiento - Tareas Pendientes - UVEG",
                "asunto": "Seguimiento de avance {modulo} - Semana {semana} - UVEG",
                "mensaje": """Buen d√≠a {nombre}.
					
Mi nombre es Juan Manuel y soy tu asesor virtual en el m√≥dulo de "{modulo}" en la UVEG, en este momento estamos iniciando la {semana} semana del m√≥dulo. Me pongo en contacto, para saber si tienes alg√∫n inconveniente que no te este permitiendo avanzar al ritmo que les he marcado, ya que veo que tienes algunos retos pendientes y en tu avance semanal se ve reflejado.

Retos pendientes:
{actividades_faltantes}

Recuerda que esta es solo una sugerencia, si consideras que no tienes inconveniente en avanzar a tu ritmo, haz caso omiso a este y los siguientes mensajes.

Dr. Juan Manuel Mart√≠nez Zaragoza"""
            },
            
            "felicitacion": {
                "nombre": "üéâ Felicitaci√≥n por Desempe√±o - UVEG",
                "asunto": "Felicitaciones por tu desempe√±o - {modulo} - UVEG",
                "mensaje": """Un gusto saludarte {nombre}.
					
Por medio del presente, perm√≠teme felicitarte por tu alto desempe√±o durante esta semana, con esto demuestras tu compromiso para con tu carrera y la resiliencia del d√≠a a d√≠a.

Retos completados:
{actividades_completadas}

Continua as√≠ y no olvides revisar el tablero de avisos.

Dr. Juan Manuel Mart√≠nez Zaragoza"""
            }
        },
        
        "novauniversitas": {
            "bienvenida": {
                "nombre": "üéì Bienvenida al M√≥dulo - NovaUniversitas",
                "asunto": "Bienvenida al m√≥dulo {modulo} - NovaUniversitas",
                "mensaje": """Apreciable {nombre},

Mi nombre es Juan Manuel y ser√© tu asesor virtual en el m√≥dulo "{modulo}" de NovaUniversitas. Te doy la m√°s cordial bienvenida al curso y quiero compartirte algunas recomendaciones importantes para tu √©xito acad√©mico.

Como gu√≠a inicial, te sugiero completar los primeros tres desaf√≠os antes del {fecha_meta}. Sin embargo, tienes la flexibilidad de avanzar a tu propio ritmo, considerando que el m√≥dulo tiene una duraci√≥n de 24 d√≠as naturales.

Este mensaje tiene como prop√≥sito identificar si enfrentas alg√∫n inconveniente que pueda afectar tu rendimiento acad√©mico, tales como:
- Limitaciones de tiempo
- Dificultades t√©cnicas con los desaf√≠os
- Problemas de conectividad o acceso a dispositivos
- Necesidad de ajustar tu estrategia de estudio

Estar√© monitoreando constantemente tu progreso acad√©mico y me encuentro disponible para resolver cualquier duda o inquietud que puedas tener.

A partir de la pr√≥xima semana, recibir√°s comunicaciones peri√≥dicas sobre tu avance acad√©mico para mantener un seguimiento personalizado de tu aprendizaje.

Importante: Te recomiendo revisar regularmente la secci√≥n de "ANUNCIOS" en tu campus virtual para mantenerte informado sobre comunicaciones relevantes.

Tenemos programada una sesi√≥n s√≠ncrona el {fecha_sesion} a las {hora_sesion} horas para resoluci√≥n de dudas. Podr√°s acceder a trav√©s del enlace disponible en tu aula virtual.

Te solicito confirmar la recepci√≥n de este correo.

¬°Te deseo mucho √©xito en tu trayectoria acad√©mica!

Dr. Juan Manuel Mart√≠nez Zaragoza
Asesor Virtual - NovaUniversitas"""
            },
            
            "seguimiento_sin_acceso": {
                "nombre": "‚ö†Ô∏è Seguimiento Acad√©mico - Sin Acceso - NovaUniversitas",
                "asunto": "Seguimiento acad√©mico {modulo} - Semana {semana} - NovaUniversitas",
                "mensaje": """Apreciable {nombre},

Mi nombre es Juan Manuel, tu asesor virtual del m√≥dulo "{modulo}" en NovaUniversitas. Me dirijo a ti en relaci√≥n a tu progreso acad√©mico en la {semana} semana del m√≥dulo.

He observado que a√∫n no has iniciado actividades en la plataforma educativa. Aunque esto no representa un atraso significativo en este momento, es importante que comiences con los desaf√≠os programados para mantener un ritmo adecuado de aprendizaje.

Te invito cordialmente a:
- Acceder a tu campus virtual de NovaUniversitas
- Revisar los desaf√≠os disponibles
- Contactarme ante cualquier duda o dificultad

Estoy disponible para brindarte apoyo a trav√©s de:
- Este correo electr√≥nico
- Mensajer√≠a interna del campus virtual
- WhatsApp: xxx (agrega tu n√∫mero)

Me interesa conocer si existe alguna situaci√≥n particular que est√© impidiendo tu participaci√≥n en el m√≥dulo. Tu bienestar y √©xito acad√©mico son mi prioridad.

Quedo atento a tu pronta respuesta.

Saludos cordiales,

Dr. Juan Manuel Mart√≠nez Zaragoza
Asesor Virtual - NovaUniversitas"""
            },
            
            "seguimiento_atraso": {
                "nombre": "üìã Seguimiento Acad√©mico - Desaf√≠os Pendientes - NovaUniversitas",
                "asunto": "Seguimiento de progreso {modulo} - Semana {semana} - NovaUniversitas",
                "mensaje": """Apreciable {nombre},

Mi nombre es Juan Manuel, tu asesor virtual del m√≥dulo "{modulo}" en NovaUniversitas. Me pongo en contacto contigo para hacer un seguimiento de tu progreso acad√©mico en la {semana} semana del m√≥dulo.

He revisado tu expediente acad√©mico y he identificado algunos desaf√≠os pendientes que requieren tu atenci√≥n para mantener el ritmo de aprendizaje sugerido:

Desaf√≠os pendientes por completar:
{actividades_faltantes}

Es importante mencionar que estas recomendaciones de ritmo est√°n dise√±adas para optimizar tu experiencia de aprendizaje. Si consideras que puedes manejar un ritmo diferente y no requieres este seguimiento, puedes hacer caso omiso a estas comunicaciones.

Sin embargo, si necesitas apoyo o tienes alguna dificultad espec√≠fica, estoy aqu√≠ para ayudarte. Podemos trabajar juntos en una estrategia personalizada que se adapte a tus necesidades.

Opciones de contacto:
- Responder a este correo
- Mensajer√≠a del campus virtual
- WhatsApp: xxx (agrega tu n√∫mero)

Tu √©xito acad√©mico es importante para m√≠.

Saludos cordiales,

Dr. Juan Manuel Mart√≠nez Zaragoza
Asesor Virtual - NovaUniversitas"""
            },
            
            "felicitacion": {
                "nombre": "üéâ Reconocimiento Acad√©mico - NovaUniversitas",
                "asunto": "Felicitaciones por tu excelente desempe√±o - {modulo} - NovaUniversitas",
                "mensaje": """Apreciable {nombre},

Es un placer dirigirme a ti para reconocer tu destacado desempe√±o acad√©mico en el m√≥dulo "{modulo}" de NovaUniversitas durante esta semana.

Tu dedicaci√≥n y compromiso con tu formaci√≥n profesional son evidentes a trav√©s de los resultados obtenidos:

Desaf√≠os completados exitosamente:
{actividades_completadas}

Este nivel de excelencia acad√©mica refleja tu seriedad y determinaci√≥n hacia tus objetivos educativos. Tu constancia y esfuerzo son cualidades que sin duda te llevar√°n al √©xito profesional.

Te motivo a continuar con esta actitud ejemplar y te recordamos revisar peri√≥dicamente el tablero de anuncios en tu campus virtual para mantenerte informado sobre novedades importantes.

Sigue adelante con esa misma dedicaci√≥n. ¬°Tu futuro profesional se construye con cada logro como este!

Felicitaciones nuevamente por tu excelente trabajo.

Saludos cordiales,

Dr. Juan Manuel Mart√≠nez Zaragoza
Asesor Virtual - NovaUniversitas"""
            }
        }
    }

    # Funciones auxiliares para Tab 1
    def convertir_a_numerico(valor):
        """Convertir valor a num√©rico, manejando diferentes tipos de datos"""
        if pd.isna(valor):
            return 0
        
        if isinstance(valor, str):
            valor_limpio = valor.strip()
            if not valor_limpio:
                return 0
            try:
                return float(valor_limpio)
            except ValueError:
                return 0
        
        try:
            return float(valor)
        except (ValueError, TypeError):
            return 0

    def contar_actividades_completadas(row, columnas_actividades):
        """Contar cu√°ntas actividades ha completado un estudiante"""
        completadas = 0
        for col in columnas_actividades:
            if col in row.index:
                valor_numerico = convertir_a_numerico(row[col])
                if valor_numerico > 0:
                    completadas += 1
        return completadas

    def obtener_actividades_completadas(row, columnas_actividades, nombres_actividades):
        """Obtener lista de actividades completadas por un estudiante"""
        actividades_completadas = []
        for i, col in enumerate(columnas_actividades):
            if col in row.index:
                valor_numerico = convertir_a_numerico(row[col])
                if valor_numerico > 0:
                    actividades_completadas.append(nombres_actividades[i])
        return actividades_completadas

    def obtener_actividades_faltantes(row, columnas_actividades, nombres_actividades, actividades_requeridas):
        """Obtener lista de actividades faltantes seg√∫n la semana"""
        actividades_faltantes = []
        for i in range(actividades_requeridas):
            col = columnas_actividades[i]
            nombre = nombres_actividades[i]
            if col in row.index:
                valor_numerico = convertir_a_numerico(row[col])
                if valor_numerico <= 0:
                    actividades_faltantes.append(nombre)
            else:
                actividades_faltantes.append(nombre)
        return actividades_faltantes

    def validar_email(email):
        """Validar que el email tenga formato correcto"""
        if not email or pd.isna(email):
            return False
        email_str = str(email).strip()
        return "@" in email_str and "." in email_str.split("@")[-1]

    def obtener_emails_validos(estudiante):
        """Obtener lista de emails v√°lidos de un estudiante"""
        emails_validos = []
        
        # Verificar correo personal
        if 'Correo Personal' in estudiante.index and validar_email(estudiante['Correo Personal']):
            emails_validos.append(str(estudiante['Correo Personal']).strip())
        
        # Verificar direcci√≥n email
        if 'Direcci√≥n Email' in estudiante.index and validar_email(estudiante['Direcci√≥n Email']):
            email_institucional = str(estudiante['Direcci√≥n Email']).strip()
            emails_validos.append(email_institucional)
        
        return emails_validos

    def obtener_nombre_completo(estudiante, institucion):
        """Obtener nombre completo del estudiante seg√∫n la instituci√≥n"""
        nombre = str(estudiante.get('Nombre', 'Apreciable estudiante'))
        
        if institucion == "uveg":
            apellidos = str(estudiante.get('Apellido(s)', ''))
            return nombre, apellidos
        else:  # novauniversitas
            return nombre, ""

    def formatear_fecha(fecha_str):
        """Convierte string de fecha a formato legible"""
        try:
            fecha = datetime.strptime(fecha_str, "%Y-%m-%d")
            dias = ["lunes", "martes", "mi√©rcoles", "jueves", "viernes", "s√°bado", "domingo"]
            meses = ["enero", "febrero", "marzo", "abril", "mayo", "junio",
                    "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"]
            
            dia_semana = dias[fecha.weekday()]
            dia = fecha.day
            mes = meses[fecha.month - 1]
            
            return f"{dia_semana} {dia} de {mes}"
        except:
            return fecha_str

    def enviar_correo_tab1(destinatario, asunto, cuerpo):
        """Enviar correo usando Gmail"""
        try:
            msg = EmailMessage()
            msg["Subject"] = asunto
            msg["From"] = REMITENTE
            msg["To"] = destinatario
            msg.set_content(cuerpo)
            
            with smtplib.SMTP_SSL("smtp.gmail.com", 465) as smtp:
                smtp.login(REMITENTE, CLAVE_APP)
                smtp.send_message(msg)
            
            # Registrar en historial
            st.session_state.historial_envios_tab1.append({
                'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'asunto': asunto,
                'destinatario': destinatario,
                'estado': 'Enviado'
            })
            
            return True, "Enviado correctamente"
        except Exception as e:
            error_msg = f"Error: {str(e)}"
            st.session_state.historial_envios_tab1.append({
                'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'asunto': asunto,
                'destinatario': destinatario,
                'estado': error_msg
            })
            return False, error_msg

    def enviar_a_todos_los_emails(emails_validos, asunto, cuerpo, nombre_estudiante):
        """Enviar correo a todas las direcciones v√°lidas del estudiante"""
        resultados = []
        emails_enviados = []
        
        for email in emails_validos:
            if email and email not in emails_enviados:
                exito, mensaje = enviar_correo_tab1(email, asunto, cuerpo)
                resultados.append({'email': email, 'exito': exito, 'mensaje': mensaje})
                emails_enviados.append(email)
                
                if exito:
                    st.success(f"  ‚úÖ Enviado a {email}")
                else:
                    st.error(f"  ‚ùå Error en {email}: {mensaje}")
                
                time.sleep(0.5)
        
        exitosos = sum(1 for r in resultados if r['exito'])
        return exitosos, len(resultados), emails_enviados

    def obtener_plantilla_editada(institucion, tipo_plantilla):
        """Obtener plantilla editada o base si no existe"""
        key = f"{institucion}_{tipo_plantilla}"
        if key in st.session_state.plantillas_editadas_tab1:
            return st.session_state.plantillas_editadas_tab1[key]
        else:
            return PLANTILLAS_BASE[institucion][tipo_plantilla].copy()

    def guardar_plantilla_editada(institucion, tipo_plantilla, plantilla_data):
        """Guardar plantilla editada en session state"""
        key = f"{institucion}_{tipo_plantilla}"
        st.session_state.plantillas_editadas_tab1[key] = plantilla_data

    # Interfaz principal Tab 1
    col1, col2 = st.columns([2, 1])

    with col1:
        st.subheader("üè´ Selecci√≥n de Instituci√≥n")
        institucion_seleccionada = st.selectbox(
            "Selecciona la instituci√≥n:",
            options=["uveg", "novauniversitas"],
            format_func=lambda x: CONFIGURACIONES_INSTITUCIONES[x]["nombre"],
            help="Cada instituci√≥n tiene diferentes columnas de actividades y mensajes espec√≠ficos",
            key="institucion_tab1"
        )
        
        config_institucion = CONFIGURACIONES_INSTITUCIONES[institucion_seleccionada]
        st.info(f"üìä Instituci√≥n: **{config_institucion['nombre']}** - {len(config_institucion['columnas_actividades'])} actividades")

    with col2:
        st.subheader("üìé Archivos Adjuntos")
        archivos_adjuntos = st.file_uploader(
            "Sube archivos adjuntos (opcional)", 
            accept_multiple_files=True,
            help="Gu√≠as, cronogramas, etc.",
            key="archivos_tab1"
        )

    # Editor de plantillas
    st.markdown("---")
    st.subheader("üìù Editor de Plantillas")

    with st.expander("‚úèÔ∏è Personalizar Plantillas de Correo", expanded=False):
        col_select, col_edit = st.columns([1, 2])
        
        with col_select:
            tipo_plantilla_editar = st.selectbox(
                "Selecciona plantilla a editar:",
                options=["bienvenida", "seguimiento_sin_acceso", "seguimiento_atraso", "felicitacion"],
                format_func=lambda x: PLANTILLAS_BASE[institucion_seleccionada][x]["nombre"],
                key="tipo_plantilla_tab1"
            )
            
            plantilla_actual = obtener_plantilla_editada(institucion_seleccionada, tipo_plantilla_editar)
            
            st.write(f"**Editando**: {plantilla_actual['nombre']}")
        
        with col_edit:
            # Editor de asunto
            nuevo_asunto = st.text_input(
                "Asunto del correo:",
                value=plantilla_actual["asunto"],
                help="Puedes usar variables como {nombre}, {modulo}, {semana}, etc.",
                key="asunto_tab1"
            )
            
            # Editor de mensaje
            nuevo_mensaje = st.text_area(
                "Mensaje del correo:",
                value=plantilla_actual["mensaje"],
                height=300,
                help="Puedes personalizar el mensaje, agregar tu WhatsApp, etc.",
                key="mensaje_tab1"
            )
            
            # Botones de acci√≥n
            col_save, col_reset = st.columns(2)
            
            with col_save:
                if st.button("üíæ Guardar Cambios", type="primary", key="guardar_tab1"):
                    plantilla_editada = {
                        "nombre": plantilla_actual["nombre"],
                        "asunto": nuevo_asunto,
                        "mensaje": nuevo_mensaje
                    }
                    guardar_plantilla_editada(institucion_seleccionada, tipo_plantilla_editar, plantilla_editada)
                    st.success("‚úÖ Plantilla guardada correctamente")
            
            with col_reset:
                if st.button("üîÑ Restaurar Original", key="restaurar_tab1"):
                    key = f"{institucion_seleccionada}_{tipo_plantilla_editar}"
                    if key in st.session_state.plantillas_editadas_tab1:
                        del st.session_state.plantillas_editadas_tab1[key]
                    st.success("‚úÖ Plantilla restaurada al original")
                    st.rerun()

    # Subir archivo Excel
    st.markdown("---")
    st.subheader("üìÅ Cargar Archivo Excel de Estudiantes")
    archivo_excel = st.file_uploader(
        f"Sube el archivo Excel de {config_institucion['nombre']}", 
        type=["xlsx", "xls"],
        help=f"Columnas requeridas: {', '.join(config_institucion['columnas_requeridas'])}",
        key="archivo_excel_tab1"
    )

    # Procesar archivo Excel para Tab 1
    if archivo_excel:
        try:
            df = pd.read_excel(archivo_excel)
            st.success("‚úÖ Archivo Excel cargado correctamente")
            
            # Para NovaUniversitas, filtrar solo las columnas necesarias
            if institucion_seleccionada == "novauniversitas":
                columnas_necesarias = config_institucion['columnas_requeridas'] + config_institucion['columnas_actividades']
                columnas_existentes = [col for col in columnas_necesarias if col in df.columns]
                
                if len(columnas_existentes) >= len(config_institucion['columnas_requeridas']):
                    df = df[columnas_existentes]
                    st.info(f"üìã Filtradas {len(columnas_existentes)} columnas relevantes de {len(df.columns)} totales")
            
            # Verificar columnas requeridas
            columnas_faltantes = [col for col in config_institucion['columnas_requeridas'] if col not in df.columns]
            
            if columnas_faltantes:
                st.error(f"‚ùå Columnas faltantes: {', '.join(columnas_faltantes)}")
                st.info("Columnas disponibles:")
                st.write(list(df.columns))
            else:
                st.success("‚úÖ Todas las columnas necesarias detectadas")
                
                # Vista previa de datos
                st.subheader("üëÄ Vista Previa de Estudiantes")
                datos_preview = df[config_institucion['columnas_requeridas']].head(10)
                st.dataframe(datos_preview, use_container_width=True)
                
                # Validar emails
                total_estudiantes = len(df)
                emails_validos = sum(1 for _, fila in df.iterrows() 
                                   if obtener_emails_validos(fila))
                
                st.info(f"üìä Total estudiantes: {total_estudiantes} | Con emails v√°lidos: {emails_validos}")
                
                # Selecci√≥n de tipo de env√≠o y semana
                st.subheader("üìß Configuraci√≥n de Env√≠o")
                
                col_tipo, col_semana = st.columns([1, 1])
                
                with col_tipo:
                    tipo_envio = st.selectbox(
                        "Tipo de env√≠o:",
                        options=["automatico", "bienvenida"],
                        format_func=lambda x: "üîç An√°lisis Autom√°tico" if x == "automatico" else "üéì Bienvenida Manual",
                        key="tipo_envio_tab1"
                    )
                
                with col_semana:
                    if tipo_envio == "automatico":
                        semana = st.selectbox(
                            "Semana para an√°lisis:",
                            [1, 2, 3],
                            format_func=lambda x: f"Semana {x}",
                            key="semana_tab1"
                        )
                        actividades_requeridas = {1: 3, 2: 5, 3: 7}[semana]
                        st.write(f"**Actividades requeridas:** {actividades_requeridas}")
                    else:
                        st.write("**Env√≠o de bienvenida** a todos los estudiantes")
                        semana = 1
                        actividades_requeridas = 0
                
                # Configuraci√≥n adicional
                col_config1, col_config2 = st.columns(2)
                
                with col_config1:
                    modulo_manual = st.text_input("Nombre del m√≥dulo:", 
                                                value=config_institucion['modulo_default'],
                                                key="modulo_tab1")
                    
                    fecha_meta = st.date_input("Fecha meta:", 
                                             value=datetime.now() + timedelta(days=7),
                                             key="fecha_meta_tab1")
                
                with col_config2:
                    fecha_sesion = st.date_input("Fecha sesi√≥n s√≠ncrona:", 
                                               value=datetime.now() + timedelta(days=3),
                                               key="fecha_sesion_tab1")
                    
                    hora_sesion = st.time_input("Hora sesi√≥n:", 
                                              value=datetime.strptime("20:30", "%H:%M").time(),
                                              key="hora_sesion_tab1")
                
                # Bot√≥n para procesar seg√∫n el tipo de env√≠o
                if st.button("üöÄ Procesar Env√≠o", type="primary", key="procesar_tab1"):
                    
                    # Variables para personalizaci√≥n
                    variables_extra = {
                        'modulo': modulo_manual,
                        'semana': f"semana {semana}",
                        'institucion': config_institucion['nombre'],
                        'fecha_meta': formatear_fecha(fecha_meta.strftime("%Y-%m-%d")),
                        'fecha_sesion': formatear_fecha(fecha_sesion.strftime("%Y-%m-%d")),
                        'hora_sesion': hora_sesion.strftime("%H:%M")
                    }
                    
                    if tipo_envio == "automatico":
                        # An√°lisis autom√°tico
                        df['actividades_completadas'] = df.apply(
                            lambda row: contar_actividades_completadas(row, config_institucion['columnas_actividades']), 
                            axis=1
                        )
                        
                        # Clasificar estudiantes autom√°ticamente
                        estudiantes_completos = df[df['actividades_completadas'] >= actividades_requeridas]
                        estudiantes_incompletos = df[(df['actividades_completadas'] > 0) & (df['actividades_completadas'] < actividades_requeridas)]
                        estudiantes_sin_entregas = df[df['actividades_completadas'] == 0]
                        
                        # Guardar datos para env√≠o
                        st.session_state.datos_estudiantes_tab1 = {
                            'completos': estudiantes_completos,
                            'incompletos': estudiantes_incompletos,
                            'sin_entregas': estudiantes_sin_entregas,
                            'bienvenida': pd.DataFrame(),  # Vac√≠o para autom√°tico
                            'semana': semana,
                            'actividades_requeridas': actividades_requeridas,
                            'institucion': institucion_seleccionada,
                            'config_institucion': config_institucion,
                            'variables_extra': variables_extra,
                            'tipo_envio': 'automatico'
                        }
                        
                        # Mostrar m√©tricas del an√°lisis
                        col1, col2, col3 = st.columns(3)
                        col1.metric("‚úÖ Completos", len(estudiantes_completos))
                        col2.metric("‚ö†Ô∏è Incompletos", len(estudiantes_incompletos))
                        col3.metric("‚ùå Sin Entregas", len(estudiantes_sin_entregas))
                        
                        st.success("üéØ **An√°lisis autom√°tico completado - Plantillas asignadas:**")
                        st.write(f"‚Ä¢ **{len(estudiantes_completos)}** estudiantes ‚Üí üéâ Felicitaci√≥n")
                        st.write(f"‚Ä¢ **{len(estudiantes_incompletos)}** estudiantes ‚Üí üìã Seguimiento - Tareas Pendientes")
                        st.write(f"‚Ä¢ **{len(estudiantes_sin_entregas)}** estudiantes ‚Üí ‚ö†Ô∏è Seguimiento - Sin Acceso")
                    
                    else:
                        # Env√≠o manual de bienvenida
                        st.session_state.datos_estudiantes_tab1 = {
                            'completos': pd.DataFrame(),
                            'incompletos': pd.DataFrame(),
                            'sin_entregas': pd.DataFrame(),
                            'bienvenida': df,  # Todos los estudiantes
                            'semana': semana,
                            'actividades_requeridas': actividades_requeridas,
                            'institucion': institucion_seleccionada,
                            'config_institucion': config_institucion,
                            'variables_extra': variables_extra,
                            'tipo_envio': 'bienvenida'
                        }
                        
                        st.success("üéì **Listo para env√≠o de bienvenida:**")
                        st.write(f"‚Ä¢ **{len(df)}** estudiantes ‚Üí üéì Plantilla de Bienvenida")
                    
                    st.session_state.analisis_generado_tab1 = True
                    
        except Exception as e:
            st.error(f"‚ùå Error al procesar el archivo Excel: {str(e)}")

    # Mostrar secci√≥n de env√≠o si el an√°lisis est√° generado
    if st.session_state.analisis_generado_tab1 and st.session_state.datos_estudiantes_tab1:
        datos = st.session_state.datos_estudiantes_tab1
        estudiantes_completos = datos['completos']
        estudiantes_incompletos = datos['incompletos']
        estudiantes_sin_entregas = datos['sin_entregas']
        estudiantes_bienvenida = datos['bienvenida']
        config_institucion = datos['config_institucion']
        variables_extra = datos['variables_extra']
        tipo_envio = datos['tipo_envio']
        
        st.markdown("---")
        st.subheader("üìß Env√≠o de Correos")
        
        if tipo_envio == "automatico":
            # Botones de env√≠o por categor√≠a (an√°lisis autom√°tico)
            col_env1, col_env2, col_env3 = st.columns(3)
            
            with col_env1:
                if st.button("üéâ Enviar Felicitaciones", 
                           type="primary", 
                           disabled=len(estudiantes_completos)==0,
                           key="felicit_tab1"):
                    st.write("### üì§ Enviando Felicitaciones...")
                    for _, estudiante in estudiantes_completos.iterrows():
                        nombre, apellidos = obtener_nombre_completo(estudiante, datos['institucion'])
                        nombre_completo = f"{nombre} {apellidos}".strip()
                        st.write(f"Enviando a: {nombre_completo}")
                        
                        # Obtener actividades completadas
                        actividades_completadas = obtener_actividades_completadas(
                            estudiante, 
                            config_institucion['columnas_actividades'],
                            config_institucion['nombres_actividades']
                        )
                        
                        # Usar plantilla editada
                        plantilla = obtener_plantilla_editada(datos['institucion'], 'felicitacion')
                        asunto = plantilla['asunto'].format(**variables_extra)
                        
                        actividades_lista = "\n".join([f"{i+1}. {act}" for i, act in enumerate(actividades_completadas)])
                        mensaje = plantilla['mensaje'].format(
                            nombre=nombre,
                            actividades_completadas=actividades_lista,
                            **variables_extra
                        )
                        
                        # Enviar correos
                        emails_validos = obtener_emails_validos(estudiante)
                        if emails_validos:
                            exitosos, total, emails_enviados = enviar_a_todos_los_emails(
                                emails_validos, asunto, mensaje, nombre_completo
                            )
                            st.info(f"üìß Enviado a {len(emails_enviados)} direcciones")
                        else:
                            st.warning(f"‚ö†Ô∏è Sin emails v√°lidos para {nombre_completo}")
                        
                        time.sleep(1)
                    st.success("üéâ Felicitaciones enviadas!")
            
            with col_env2:
                if st.button("üìã Enviar Recordatorios", 
                           type="secondary", 
                           disabled=len(estudiantes_incompletos)==0,
                           key="recordat_tab1"):
                    st.write("### üì§ Enviando Recordatorios...")
                    for _, estudiante in estudiantes_incompletos.iterrows():
                        nombre, apellidos = obtener_nombre_completo(estudiante, datos['institucion'])
                        nombre_completo = f"{nombre} {apellidos}".strip()
                        st.write(f"Enviando a: {nombre_completo}")
                        
                        # Obtener actividades faltantes
                        actividades_faltantes = obtener_actividades_faltantes(
                            estudiante,
                            config_institucion['columnas_actividades'],
                            config_institucion['nombres_actividades'],
                            datos['actividades_requeridas']
                        )
                        
                        # Usar plantilla editada
                        plantilla = obtener_plantilla_editada(datos['institucion'], 'seguimiento_atraso')
                        asunto = plantilla['asunto'].format(**variables_extra)
                        
                        actividades_lista = "\n".join([f"{i+1}. {act}" for i, act in enumerate(actividades_faltantes)])
                        mensaje = plantilla['mensaje'].format(
                            nombre=nombre,
                            actividades_faltantes=actividades_lista,
                            **variables_extra
                        )
                        
                        # Enviar correos
                        emails_validos = obtener_emails_validos(estudiante)
                        if emails_validos:
                            exitosos, total, emails_enviados = enviar_a_todos_los_emails(
                                emails_validos, asunto, mensaje, nombre_completo
                            )
                            st.info(f"üìß Enviado a {len(emails_enviados)} direcciones")
                        else:
                            st.warning(f"‚ö†Ô∏è Sin emails v√°lidos para {nombre_completo}")
                        
                        time.sleep(1)
                    st.success("üìã Recordatorios enviados!")
            
            with col_env3:
                if st.button("‚ö†Ô∏è Enviar Alertas", 
                           type="secondary", 
                           disabled=len(estudiantes_sin_entregas)==0,
                           key="alertas_tab1"):
                    st.write("### üì§ Enviando Alertas...")
                    for _, estudiante in estudiantes_sin_entregas.iterrows():
                        nombre, apellidos = obtener_nombre_completo(estudiante, datos['institucion'])
                        nombre_completo = f"{nombre} {apellidos}".strip()
                        st.write(f"Enviando a: {nombre_completo}")
                        
                        # Usar plantilla editada
                        plantilla = obtener_plantilla_editada(datos['institucion'], 'seguimiento_sin_acceso')
                        asunto = plantilla['asunto'].format(**variables_extra)
                        mensaje = plantilla['mensaje'].format(
                            nombre=nombre,
                            **variables_extra
                        )
                        
                        # Enviar correos
                        emails_validos = obtener_emails_validos(estudiante)
                        if emails_validos:
                            exitosos, total, emails_enviados = enviar_a_todos_los_emails(
                                emails_validos, asunto, mensaje, nombre_completo
                            )
                            st.info(f"üìß Enviado a {len(emails_enviados)} direcciones")
                        else:
                            st.warning(f"‚ö†Ô∏è Sin emails v√°lidos para {nombre_completo}")
                        
                        time.sleep(1)
                    st.success("‚ö†Ô∏è Alertas enviadas!")
            
            # Bot√≥n de env√≠o masivo para an√°lisis autom√°tico
            st.markdown("---")
            total_estudiantes = len(estudiantes_completos) + len(estudiantes_incompletos) + len(estudiantes_sin_entregas)
            
            if total_estudiantes > 0:
                if st.button(f"üöÄ Enviar Todos los Correos Autom√°ticos ({total_estudiantes} estudiantes)", type="primary", key="masivo_tab1"):
                    st.balloons()
                    st.write("### üì§ Iniciando Env√≠o Masivo Inteligente...")
                    
                    total_exitosos = 0
                    total_procesados = 0
                    
                    # Procesar cada categor√≠a con su plantilla correspondiente
                    for categoria, estudiantes_cat, tipo_plantilla in [
                        ("Felicitaciones", estudiantes_completos, "felicitacion"),
                        ("Recordatorios", estudiantes_incompletos, "seguimiento_atraso"),
                        ("Alertas", estudiantes_sin_entregas, "seguimiento_sin_acceso")
                    ]:
                        
                        if len(estudiantes_cat) > 0:
                            st.write(f"**üìß Enviando {categoria}...**")
                            
                            for _, estudiante in estudiantes_cat.iterrows():
                                nombre, apellidos = obtener_nombre_completo(estudiante, datos['institucion'])
                                nombre_completo = f"{nombre} {apellidos}".strip()
                                st.write(f"‚Üí {nombre_completo}")
                                
                                # Usar plantilla editada
                                plantilla = obtener_plantilla_editada(datos['institucion'], tipo_plantilla)
                                asunto = plantilla['asunto'].format(**variables_extra)
                                
                                # Personalizar mensaje seg√∫n tipo
                                if tipo_plantilla == "felicitacion":
                                    actividades_completadas = obtener_actividades_completadas(
                                        estudiante, 
                                        config_institucion['columnas_actividades'],
                                        config_institucion['nombres_actividades']
                                    )
                                    actividades_lista = "\n".join([f"{i+1}. {act}" for i, act in enumerate(actividades_completadas)])
                                    mensaje = plantilla['mensaje'].format(
                                        nombre=nombre,
                                        actividades_completadas=actividades_lista,
                                        **variables_extra
                                    )
                                elif tipo_plantilla == "seguimiento_atraso":
                                    actividades_faltantes = obtener_actividades_faltantes(
                                        estudiante,
                                        config_institucion['columnas_actividades'],
                                        config_institucion['nombres_actividades'],
                                        datos['actividades_requeridas']
                                    )
                                    actividades_lista = "\n".join([f"{i+1}. {act}" for i, act in enumerate(actividades_faltantes)])
                                    mensaje = plantilla['mensaje'].format(
                                        nombre=nombre,
                                        actividades_faltantes=actividades_lista,
                                        **variables_extra
                                    )
                                else:  # seguimiento_sin_acceso
                                    mensaje = plantilla['mensaje'].format(
                                        nombre=nombre,
                                        **variables_extra
                                    )
                                
                                # Enviar correos
                                emails_validos = obtener_emails_validos(estudiante)
                                if emails_validos:
                                    exitosos, total, emails_enviados = enviar_a_todos_los_emails(
                                        emails_validos, asunto, mensaje, nombre_completo
                                    )
                                    total_exitosos += exitosos
                                    st.info(f"  üìß Enviado a {len(emails_enviados)} direcciones")
                                else:
                                    st.warning(f"  ‚ö†Ô∏è Sin emails v√°lidos")
                                
                                total_procesados += 1
                                time.sleep(1)
                    
                    st.success(f"üéâ **¬°Proceso Completado!** {total_exitosos} correos enviados de {total_procesados} estudiantes")
        
        else:
            # Env√≠o manual de bienvenida
            st.write("### üéì Env√≠o de Bienvenida")
            
            if st.button(f"üéì Enviar Bienvenida a Todos ({len(estudiantes_bienvenida)} estudiantes)", type="primary", key="bienvenida_tab1"):
                st.write("### üì§ Enviando Correos de Bienvenida...")
                
                total_exitosos = 0
                total_procesados = 0
                
                # Usar plantilla editada
                plantilla = obtener_plantilla_editada(datos['institucion'], 'bienvenida')
                
                for _, estudiante in estudiantes_bienvenida.iterrows():
                    nombre, apellidos = obtener_nombre_completo(estudiante, datos['institucion'])
                    nombre_completo = f"{nombre} {apellidos}".strip()
                    st.write(f"‚Üí {nombre_completo}")
                    
                    asunto = plantilla['asunto'].format(**variables_extra)
                    mensaje = plantilla['mensaje'].format(
                        nombre=nombre,
                        **variables_extra
                    )
                    
                    # Enviar correos
                    emails_validos = obtener_emails_validos(estudiante)
                    if emails_validos:
                        exitosos, total, emails_enviados = enviar_a_todos_los_emails(
                            emails_validos, asunto, mensaje, nombre_completo
                        )
                        total_exitosos += exitosos
                        st.info(f"  üìß Enviado a {len(emails_enviados)} direcciones")
                    else:
                        st.warning(f"  ‚ö†Ô∏è Sin emails v√°lidos")
                    
                    total_procesados += 1
                    time.sleep(1)
                
                st.success(f"üéâ **¬°Bienvenidas enviadas!** {total_exitosos} correos enviados de {total_procesados} estudiantes")

    # Mostrar historial de env√≠os Tab 1
    if st.session_state.historial_envios_tab1:
        st.markdown("---")
        st.subheader("üìã Historial de Env√≠os")
        
        df_historial = pd.DataFrame(st.session_state.historial_envios_tab1)
        col1, col2, col3, col4 = st.columns(4)
        
        total = len(df_historial)
        exitosos = len(df_historial[df_historial['estado'] == 'Enviado'])
        
        col1.metric("Total", total)
        col2.metric("‚úÖ Exitosos", exitosos)
        col3.metric("‚ùå Fallidos", total - exitosos)
        
        if col4.button("üóëÔ∏è Limpiar Historial", key="limpiar_tab1"):
            st.session_state.historial_envios_tab1 = []
            st.rerun()
        
        st.dataframe(
            df_historial[['timestamp', 'destinatario', 'asunto', 'estado']].sort_values('timestamp', ascending=False),
            use_container_width=True
        )

# =====================================================
# TAB 2: SISTEMA DE ENV√çO MASIVO (PR√ÅCTICAS) - INTEGRACI√ìN DEL email_app.py
# =====================================================

with tab2:
    st.header("üìß Sistema de Env√≠o de Correos - Pr√°cticas Profesionales")
    st.markdown("*Env√≠o masivo personalizado para pr√°cticas y estancias profesionales*")
    
    # Funci√≥n para procesar archivos Excel
    @st.cache_data
    def load_excel_data(file):
        """Cargar datos del archivo Excel"""
        try:
            df = pd.read_excel(file, sheet_name='Calificaciones')
            return df
        except Exception as e:
            st.error(f"Error al cargar el archivo: {str(e)}")
            return None

    # Plantillas de correo para pr√°cticas
    PLANTILLAS_PRACTICAS = {
        "Bienvenida": {
            "asunto": "Bienvenida y primer reto - Estancias Profesionales UVEG",
            "contenido": """Apreciable {nombre_completo}:

Mi nombre es {nombre_asesor}, y ser√© tu asesor durante el desarrollo de las Estancias Profesionales en la {universidad}. Te doy la m√°s cordial bienvenida al curso y aprovecho para compartirte informaci√≥n importante.

Primer Reto (Reto 1 - Carta de Autorizaci√≥n):  
He programado como fecha de entrega el {fecha_cierre_actividad} a medio d√≠a.  
Es importante que todos los datos solicitados est√©n correctos y completos, ya que la evaluaci√≥n ser√° binaria (100 o 0 puntos).  
Si no acreditas el Reto 1, no podr√°s continuar con los siguientes retos.

Periodo de pr√°cticas profesionales:  
- Inicio: {fecha_inicio_practicas}  
- T√©rmino: {fecha_fin_practicas}

Importante: Revisa con atenci√≥n la r√∫brica del Reto 1. Es fundamental que cumplas todos los criterios exactamente como se indican.

Tambi√©n te pido que revises la secci√≥n de "Avisos" en tu aula virtual para mantenerte al tanto de cualquier novedad.

Quedo a tu disposici√≥n para cualquier duda. Recuerda que no est√°s solo/a, estoy aqu√≠ para ayudarte durante todo el proceso.

Te agradecer√© que me confirmes la recepci√≥n de este correo.

Atentamente,  
{nombre_completo_asesor}  
Asesor Virtual  
{nombre_universidad}"""
        },
        
        "Sesi√≥n S√≠ncrona": {
            "asunto": "Invitaci√≥n - Sesi√≥n s√≠ncrona de las pr√°cticas profesionales",
            "contenido": """Buen d√≠a, {nombre}:

El presente tiene el objetivo de invitarte a la: Sesi√≥n s√≠ncrona de las pr√°cticas profesionales

{info_google_meet}

Te esperamos puntualmente.

Saludos cordiales,
{nombre_asesor}"""
        },
        
        "Env√≠o de Grabaci√≥n": {
            "asunto": "Grabaci√≥n de sesi√≥n s√≠ncrona - Reto {numero_reto}",
            "contenido": """Buen d√≠a, {nombre}:

Env√≠o la grabaci√≥n de la sesi√≥n s√≠ncrona, correspondiente al reto {numero_reto}:

Enlace: {enlace_grabacion}

Agradecer√© me contestes de recibido este mensaje.

Quedo al pendiente.

Saludos,
{nombre_asesor}"""
        },
        
        "Libre": {
            "asunto": "",
            "contenido": """Apreciable {nombre}:

[Escribe aqu√≠ tu mensaje personalizado]

Saludos cordiales,
{nombre_asesor}"""
        }
    }

    def enviar_correo_tab2(smtp_server, smtp_port, email_usuario, email_password, destinatario, asunto, contenido, archivos_adjuntos=None):
        """Funci√≥n para enviar correo electr√≥nico"""
        try:
            # Crear mensaje
            msg = MIMEMultipart()
            msg['From'] = email_usuario
            msg['To'] = destinatario
            msg['Subject'] = asunto
            
            # Agregar cuerpo del mensaje
            msg.attach(MIMEText(contenido, 'plain', 'utf-8'))
            
            # Agregar archivos adjuntos
            if archivos_adjuntos:
                for archivo in archivos_adjuntos:
                    part = MIMEBase('application', 'octet-stream')
                    part.set_payload(archivo.read())
                    encoders.encode_base64(part)
                    part.add_header(
                        'Content-Disposition',
                        f'attachment; filename= {archivo.name}'
                    )
                    msg.attach(part)
            
            # Conectar al servidor SMTP
            server = smtplib.SMTP(smtp_server, smtp_port)
            server.starttls()
            server.login(email_usuario, email_password)
            
            # Enviar correo
            text = msg.as_string()
            server.sendmail(email_usuario, destinatario, text)
            server.quit()
            
            return True, "Correo enviado exitosamente"
        
        except Exception as e:
            return False, f"Error al enviar correo: {str(e)}"

    # Sidebar para configuraci√≥n Tab 2
    st.sidebar.header("‚öôÔ∏è Configuraci√≥n de Correo")

    # Configuraci√≥n SMTP
    smtp_server = st.sidebar.text_input("Servidor SMTP", value="smtp.gmail.com")
    smtp_port = st.sidebar.number_input("Puerto SMTP", value=587, min_value=1, max_value=65535)
    email_usuario = st.sidebar.text_input("Email de usuario", placeholder="tu_email@gmail.com")
    email_password = st.sidebar.text_input("Contrase√±a", type="password", 
                                          help="Para Gmail, usa una contrase√±a de aplicaci√≥n")

    # Informaci√≥n del asesor
    st.sidebar.header("üë®‚Äçüè´ Informaci√≥n del Asesor")
    nombre_asesor = st.sidebar.text_input("Nombre del Asesor", value="Juan Manuel Martinez Zaragoza")
    nombre_completo_asesor = st.sidebar.text_input("Nombre Completo del Asesor", value="Juan Manuel Martinez Zaragoza")
    universidad = st.sidebar.text_input("Universidad", value="UVEG")
    nombre_universidad = st.sidebar.text_input("Nombre Completo Universidad", value="Universidad Virtual del Estado de Guanajuato")

    # √Årea principal Tab 2
    col1, col2 = st.columns([1, 2])

    with col1:
        st.subheader("üìÅ Cargar Archivo Excel")
        uploaded_file = st.file_uploader("Selecciona el archivo Excel", type=['xlsx', 'xls'], key="upload_tab2")
        
        if uploaded_file is not None:
            df = load_excel_data(uploaded_file)
            if df is not None:
                st.success(f"Archivo cargado: {len(df)} registros encontrados")
                
                # Mostrar vista previa
                st.subheader("Vista previa de datos:")
                st.dataframe(df[['Nombre', 'Apellido(s)', 'Correo Personal', 'Direcci√≥n Email']].head())
                
                # Selector de destinatarios
                st.subheader("Seleccionar destinatarios:")
                enviar_a = st.selectbox("Enviar correos a:", 
                                       ["Correo Personal", "Direcci√≥n Email", "Ambos"], key="enviar_a_tab2")

    with col2:
        st.subheader("‚úâÔ∏è Composici√≥n del Correo")
        
        # Seleccionar plantilla
        plantilla_seleccionada = st.selectbox("Selecciona una plantilla:", 
                                            ["Bienvenida", "Sesi√≥n S√≠ncrona", "Env√≠o de Grabaci√≥n", "Libre"], key="plantilla_tab2")
        
        # Campos adicionales seg√∫n la plantilla
        if plantilla_seleccionada == "Bienvenida":
            col_fecha1, col_fecha2 = st.columns(2)
            with col_fecha1:
                fecha_cierre_actividad = st.date_input("Fecha de cierre de actividad", key="fecha_cierre_tab2")
                fecha_inicio_practicas = st.date_input("Fecha de inicio de pr√°cticas", key="fecha_inicio_tab2")
            with col_fecha2:
                fecha_fin_practicas = st.date_input("Fecha de fin de pr√°cticas", key="fecha_fin_tab2")
        
        elif plantilla_seleccionada == "Sesi√≥n S√≠ncrona":
            st.write("**Informaci√≥n de Google Meet:**")
            info_google_meet = st.text_area(
                "Pega aqu√≠ la informaci√≥n completa de Google Meet:",
                value="""Martes, 6 de mayo ¬∑ 8:30 ‚Äì 9:30pm Zona horaria: America/Mexico_City 
Informaci√≥n para unirse con Google Meet 
Enlace de la videollamada: https://meet.google.com/ibb-zfcq-fps""",
                height=100,
                help="Copia y pega directamente la informaci√≥n que genera Google Meet al crear una reuni√≥n",
                key="google_meet_tab2"
            )
        
        elif plantilla_seleccionada == "Env√≠o de Grabaci√≥n":
            numero_reto = st.text_input("N√∫mero de reto", value="1", key="numero_reto_tab2")
            enlace_grabacion = st.text_input("Enlace de grabaci√≥n", 
                                           value="https://drive.google.com/file/d/1xPRTqb_hE0eXi6VOCA2Kg9ydSMj1qn8k/view?usp=sharing",
                                           key="enlace_grab_tab2")
        
        # Asunto del correo
        asunto_default = PLANTILLAS_PRACTICAS[plantilla_seleccionada]["asunto"]
        asunto = st.text_input("Asunto del correo:", value=asunto_default, key="asunto_tab2")
        
        # Contenido del correo
        contenido_default = PLANTILLAS_PRACTICAS[plantilla_seleccionada]["contenido"]
        contenido = st.text_area("Contenido del correo:", value=contenido_default, height=300, key="contenido_tab2")
        
        # Archivos adjuntos
        st.subheader("üìé Archivos Adjuntos")
        archivos_adjuntos = st.file_uploader("Selecciona archivos para adjuntar", 
                                           accept_multiple_files=True, key="archivos_tab2")
        
        if archivos_adjuntos:
            st.write("Archivos seleccionados:")
            for archivo in archivos_adjuntos:
                st.write(f"- {archivo.name} ({archivo.size} bytes)")

    # Vista previa del correo Tab 2
    if uploaded_file is not None and df is not None:
        st.markdown("---")
        st.header("üëÅÔ∏è Vista Previa del Correo")
        
        # Seleccionar un registro para vista previa
        indice_preview = st.selectbox("Selecciona un destinatario para vista previa:", 
                                    range(len(df)), 
                                    format_func=lambda x: f"{df.iloc[x]['Nombre']} {df.iloc[x]['Apellido(s)']}",
                                    key="preview_tab2")
        
        # Obtener datos del destinatario
        destinatario = df.iloc[indice_preview]
        nombre_completo = f"{destinatario['Nombre']} {destinatario['Apellido(s)']}"
        
        # Personalizar contenido
        contenido_personalizado = contenido.format(
            nombre=destinatario['Nombre'],
            nombre_completo=nombre_completo,
            nombre_asesor=nombre_asesor,
            nombre_completo_asesor=nombre_completo_asesor,
            universidad=universidad,
            nombre_universidad=nombre_universidad,
            fecha_cierre_actividad=fecha_cierre_actividad if 'fecha_cierre_actividad' in locals() else "fecha_cierre_actividad",
            fecha_inicio_practicas=fecha_inicio_practicas if 'fecha_inicio_practicas' in locals() else "fecha_inicio_practicas",
            fecha_fin_practicas=fecha_fin_practicas if 'fecha_fin_practicas' in locals() else "fecha_fin_practicas",
            info_google_meet=info_google_meet if 'info_google_meet' in locals() else "info_google_meet",
            numero_reto=numero_reto if 'numero_reto' in locals() else "numero_reto",
            enlace_grabacion=enlace_grabacion if 'enlace_grabacion' in locals() else "enlace_grabacion"
        )
        
        # Mostrar vista previa
        st.subheader(f"üìß Para: {nombre_completo}")
        st.write(f"**Asunto:** {asunto}")
        st.write("**Contenido:**")
        st.text_area("", value=contenido_personalizado, height=200, disabled=True, key="preview_content_tab2")

    # Bot√≥n para enviar correos Tab 2
    if uploaded_file is not None and df is not None:
        st.markdown("---")
        
        col_envio1, col_envio2, col_envio3 = st.columns([1, 1, 1])
        
        with col_envio2:
            if st.button("üöÄ Enviar Correos", type="primary", use_container_width=True, key="enviar_tab2"):
                if not email_usuario or not email_password:
                    st.error("Por favor, configura tu email y contrase√±a en la barra lateral")
                else:
                    # Barra de progreso
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    enviados = 0
                    errores = 0
                    
                    for i, row in df.iterrows():
                        # Actualizar progreso
                        progress = (i + 1) / len(df)
                        progress_bar.progress(progress)
                        status_text.text(f"Enviando correo {i+1} de {len(df)}")
                        
                        # Obtener datos del destinatario
                        nombre_completo = f"{row['Nombre']} {row['Apellido(s)']}"
                        
                        # Personalizar contenido
                        contenido_personalizado = contenido.format(
                            nombre=row['Nombre'],
                            nombre_completo=nombre_completo,
                            nombre_asesor=nombre_asesor,
                            nombre_completo_asesor=nombre_completo_asesor,
                            universidad=universidad,
                            nombre_universidad=nombre_universidad,
                            fecha_cierre_actividad=fecha_cierre_actividad if 'fecha_cierre_actividad' in locals() else "fecha_cierre_actividad",
                            fecha_inicio_practicas=fecha_inicio_practicas if 'fecha_inicio_practicas' in locals() else "fecha_inicio_practicas",
                            fecha_fin_practicas=fecha_fin_practicas if 'fecha_fin_practicas' in locals() else "fecha_fin_practicas",
                            info_google_meet=info_google_meet if 'info_google_meet' in locals() else "info_google_meet",
                            numero_reto=numero_reto if 'numero_reto' in locals() else "numero_reto",
                            enlace_grabacion=enlace_grabacion if 'enlace_grabacion' in locals() else "enlace_grabacion"
                        )
                        
                        # Determinar destinatarios
                        destinatarios = []
                        if enviar_a == "Correo Personal":
                            destinatarios.append(row['Correo Personal'])
                        elif enviar_a == "Direcci√≥n Email":
                            destinatarios.append(row['Direcci√≥n Email'])
                        else:  # Ambos
                            destinatarios.extend([row['Correo Personal'], row['Direcci√≥n Email']])
                        
                        # Enviar correos
                        for destinatario in destinatarios:
                            if pd.notna(destinatario) and destinatario.strip():
                                exito, mensaje = enviar_correo_tab2(
                                    smtp_server, smtp_port, email_usuario, email_password,
                                    destinatario, asunto, contenido_personalizado, archivos_adjuntos
                                )
                                
                                if exito:
                                    enviados += 1
                                else:
                                    errores += 1
                                    st.error(f"Error enviando a {destinatario}: {mensaje}")
                    
                    # Mostrar resultados finales
                    progress_bar.progress(1.0)
                    status_text.text("¬°Env√≠o completado!")
                    
                    col_result1, col_result2 = st.columns(2)
                    with col_result1:
                        st.success(f"‚úÖ Correos enviados exitosamente: {enviados}")
                    with col_result2:
                        if errores > 0:
                            st.error(f"‚ùå Errores encontrados: {errores}")
                        else:
                            st.success("üéâ ¬°Todos los correos se enviaron sin errores!")

# =====================================================
# TAB 3: SISTEMA BIENVENIDA NOVAUNIVERSITAS
# =====================================================

with tab3:
    st.header("üéì Sistema de Bienvenida NovaUniversitas")
    st.markdown("*Env√≠o masivo de credenciales y bienvenida institucional*")
    
    # Funci√≥n para generar el correo personalizado
    def generar_mensaje_personalizado(nombre, correo_institucional, contrasena):
        """
        Genera el mensaje personalizado para cada estudiante
        """
        mensaje = f"""Apreciable {nombre},

¬°Te damos la m√°s cordial bienvenida a **NovaUniversitas**! Nos complace que formes parte de nuestra comunidad acad√©mica en esta nueva etapa de aprendizaje.

Para acceder a tu **cuenta de correo institucional**:

**Correo institucional:** {correo_institucional}
**Contrase√±a temporal:** {contrasena}

**Si est√°s recursando, mantienes tu contrase√±a que has modificado.**

Te recomendamos acceder cuanto antes y cambiar tu contrase√±a por una m√°s segura.

**IMPORTANTE**: Una vez dentro de tu correo, busca el mensaje que contiene el usuario y contrase√±a de la plataforma virtual:
https://virtual.novauniversitas.edu.mx

**Tutorial para inicio de sesiones:**
https://youtu.be/75ib7aN0Tvw?feature=shared

Desde **Coordinaci√≥n Virtual**, estamos aqu√≠ para apoyarte en todo este proceso. Si tienes dudas o necesitas ayuda con el acceso, no dudes en contactarnos en mesadeayuda@virtual.novauniversitas.edu.mx

Te dejo un enlace a los lineamientos que debes seguir con el uso del correo institucional.

**Por favor, confirme de recibido.**

¬°Te deseamos mucho √©xito en esta nueva etapa!

Atentamente,
**M.D. Juan Manuel Mart√≠nez Zaragoza**
Coordinaci√≥n Virtual
**www.virtual.novauniversitas.edu.mx**"""
        
        return mensaje

    # Funci√≥n para enviar correo con archivos adjuntos
    def enviar_correo_tab3(smtp_server, smtp_port, email_usuario, email_password, 
                      destinatario, asunto, mensaje, archivos_adjuntos=None):
        """
        Env√≠a un correo electr√≥nico usando SMTP con archivos adjuntos opcionales
        """
        try:
            # Crear el mensaje
            msg = MIMEMultipart()
            msg['From'] = email_usuario
            msg['To'] = destinatario
            msg['Subject'] = asunto
            
            # Adjuntar el mensaje
            msg.attach(MIMEText(mensaje, 'plain', 'utf-8'))
            
            # Adjuntar archivos si existen
            if archivos_adjuntos:
                for archivo in archivos_adjuntos:
                    if archivo is not None:
                        try:
                            # Crear el adjunto
                            part = MIMEBase('application', 'octet-stream')
                            part.set_payload(archivo.getvalue())
                            encoders.encode_base64(part)
                            part.add_header(
                                'Content-Disposition',
                                f'attachment; filename= {archivo.name}'
                            )
                            msg.attach(part)
                        except Exception as e:
                            return False, f"Error al adjuntar archivo {archivo.name}: {str(e)}"
            
            # Conectar al servidor SMTP
            server = smtplib.SMTP(smtp_server, smtp_port)
            server.starttls()
            server.login(email_usuario, email_password)
            
            # Enviar el correo
            text = msg.as_string()
            server.sendmail(email_usuario, destinatario, text)
            server.quit()
            
            return True, "Correo enviado exitosamente"
        
        except Exception as e:
            return False, f"Error al enviar correo: {str(e)}"

    # Sidebar para configuraci√≥n SMTP Tab 3
    with st.sidebar:
        st.header("‚öôÔ∏è Configuraci√≥n de Correo")
        st.markdown("Configura los par√°metros SMTP para el env√≠o de correos")

        smtp_server_tab3 = st.text_input("Servidor SMTP", value="smtp.gmail.com", key="smtp_server_tab3")
        smtp_port_tab3 = st.number_input("Puerto SMTP", value=587, min_value=1, max_value=65535, key="smtp_port_tab3")
        email_usuario_tab3 = st.text_input("Correo del remitente", placeholder="tu_correo@gmail.com", key="email_usuario_tab3")
        email_password_tab3 = st.text_input("Contrase√±a del remitente", type="password", 
                                          help="Para Gmail, usa una contrase√±a de aplicaci√≥n", key="email_password_tab3")

        st.markdown("---")
        st.markdown("### üìã Instrucciones")
        st.markdown("""
        1. **Configura** los par√°metros SMTP
        2. **Carga** el archivo Excel con los datos
        3. **Selecciona** la hoja correspondiente
        4. **Prueba** el env√≠o con un estudiante
        5. **Ejecuta** el env√≠o masivo
        """)

    # Columnas principales Tab 3
    col1, col2 = st.columns([1, 1])

    with col1:
        st.subheader("üìÅ Cargar Archivo Excel")
        
        # Cargar archivo
        uploaded_file_tab3 = st.file_uploader(
            "Selecciona el archivo Excel con los datos de estudiantes",
            type=['xlsx', 'xls'],
            help="El archivo debe contener las columnas: NP, Grupo, Matr√≠cula, Nombre, Email_personal, Correo Institucional, Contrase√±a, Cuatrimestre, Carrera",
            key="uploaded_file_tab3"
        )
        
        if uploaded_file_tab3 is not None:
            try:
                # Leer todas las hojas del archivo
                excel_file = pd.ExcelFile(uploaded_file_tab3)
                sheet_names = excel_file.sheet_names
                
                # Selector de hoja
                selected_sheet = st.selectbox(
                    "Selecciona la hoja a procesar:",
                    sheet_names,
                    help="Elige la hoja que contiene los datos de estudiantes",
                    key="selected_sheet_tab3"
                )
                
                # Leer la hoja seleccionada
                df_tab3 = pd.read_excel(uploaded_file_tab3, sheet_name=selected_sheet)
                
                # Verificar columnas necesarias
                required_columns = ['Nombre', 'Email_personal', 'Correo Institucional', 'Contrase√±a']
                missing_columns = [col for col in required_columns if col not in df_tab3.columns]
                
                if missing_columns:
                    st.error(f"‚ùå Faltan las siguientes columnas: {', '.join(missing_columns)}")
                else:
                    # Limpiar datos
                    df_tab3 = df_tab3.dropna(subset=['Nombre', 'Email_personal', 'Correo Institucional'])
                    
                    st.success(f"‚úÖ Archivo cargado exitosamente: {len(df_tab3)} estudiantes encontrados")
                    
                    # Mostrar vista previa
                    st.subheader("üëÄ Vista Previa de Datos")
                    st.dataframe(df_tab3[['Nombre', 'Email_personal', 'Correo Institucional', 'Contrase√±a']].head(10))
                    
                    # Estad√≠sticas
                    st.info(f"üìä **Estad√≠sticas:**\n- Total de estudiantes: {len(df_tab3)}\n- Columnas disponibles: {len(df_tab3.columns)}")
                    
            except Exception as e:
                st.error(f"‚ùå Error al leer el archivo: {str(e)}")

    with col2:
        st.subheader("üìß Configuraci√≥n de Env√≠o")
        
        if uploaded_file_tab3 is not None and 'df_tab3' in locals() and not df_tab3.empty:
            
            # Asunto del correo
            asunto_tab3 = st.text_input("Asunto del correo", 
                                  value="Bienvenida a NovaUniversitas - Credenciales de Acceso",
                                  key="asunto_tab3")
            
            # Secci√≥n de archivos adjuntos
            st.subheader("üìé Archivos Adjuntos")
            
            # Selector de cantidad de archivos
            num_archivos = st.selectbox(
                "¬øCu√°ntos archivos deseas adjuntar?",
                options=[0, 1, 2, 3, 4, 5],
                help="Selecciona la cantidad de archivos que deseas adjuntar a todos los correos",
                key="num_archivos_tab3"
            )
            
            archivos_adjuntos_tab3 = []
            if num_archivos > 0:
                st.info(f"üìÅ Selecciona {num_archivos} archivo(s) para adjuntar:")
                
                for i in range(num_archivos):
                    archivo = st.file_uploader(
                        f"Archivo {i+1}:",
                        key=f"archivo_tab3_{i}",
                        help="Formatos soportados: PDF, DOC, DOCX, XLS, XLSX, TXT, JPG, PNG, etc."
                    )
                    if archivo is not None:
                        archivos_adjuntos_tab3.append(archivo)
                        st.success(f"‚úÖ {archivo.name} ({archivo.size / 1024:.1f} KB)")
            
            # Mostrar resumen de archivos adjuntos
            if archivos_adjuntos_tab3:
                st.markdown("### üìã Resumen de Archivos Adjuntos:")
                total_size = sum(archivo.size for archivo in archivos_adjuntos_tab3)
                st.write(f"**Total de archivos:** {len(archivos_adjuntos_tab3)}")
                st.write(f"**Tama√±o total:** {total_size / 1024:.1f} KB")
                
                # Mostrar lista de archivos
                for i, archivo in enumerate(archivos_adjuntos_tab3, 1):
                    st.write(f"{i}. {archivo.name} ({archivo.size / 1024:.1f} KB)")
                
                # Advertencia sobre el tama√±o
                if total_size > 10 * 1024 * 1024:  # 10 MB
                    st.warning("‚ö†Ô∏è El tama√±o total de archivos es mayor a 10 MB. Algunos servidores de correo pueden rechazar el mensaje.")
            
            # Opciones de env√≠o
            envio_option = st.radio(
                "Selecciona el tipo de env√≠o:",
                ["Vista previa del mensaje", "Env√≠o de prueba", "Env√≠o masivo"],
                key="envio_option_tab3"
            )
            
            if envio_option == "Vista previa del mensaje":
                st.subheader("üìù Vista Previa del Mensaje")
                if not df_tab3.empty:
                    # Usar el primer estudiante como ejemplo
                    nombre_ejemplo = df_tab3.iloc[0]['Nombre']
                    correo_ejemplo = df_tab3.iloc[0]['Correo Institucional']
                    contrasena_ejemplo = df_tab3.iloc[0]['Contrase√±a'] if 'Contrase√±a' in df_tab3.columns else "0125070109"
                    
                    mensaje_ejemplo = generar_mensaje_personalizado(nombre_ejemplo, correo_ejemplo, contrasena_ejemplo)
                    
                    st.text_area("Mensaje que se enviar√°:", mensaje_ejemplo, height=400, key="mensaje_preview_tab3")
                    st.info(f"üìå Ejemplo generado para: **{nombre_ejemplo}**")
                    
                    # Mostrar archivos que se adjuntar√°n
                    if archivos_adjuntos_tab3:
                        st.markdown("### üìé Archivos que se adjuntar√°n:")
                        for archivo in archivos_adjuntos_tab3:
                            st.write(f"‚Ä¢ {archivo.name}")
            
            elif envio_option == "Env√≠o de prueba":
                st.subheader("üß™ Env√≠o de Prueba")
                
                # Seleccionar estudiante para prueba
                estudiante_prueba = st.selectbox(
                    "Selecciona un estudiante para prueba:",
                    df_tab3['Nombre'].tolist(),
                    key="estudiante_prueba_tab3"
                )
                
                if st.button("üì§ Enviar Correo de Prueba", type="primary", key="enviar_prueba_tab3"):
                    if not all([smtp_server_tab3, smtp_port_tab3, email_usuario_tab3, email_password_tab3]):
                        st.error("‚ùå Por favor, completa toda la configuraci√≥n SMTP")
                    else:
                        # Obtener datos del estudiante seleccionado
                        estudiante_data = df_tab3[df_tab3['Nombre'] == estudiante_prueba].iloc[0]
                        
                        mensaje = generar_mensaje_personalizado(
                            estudiante_data['Nombre'],
                            estudiante_data['Correo Institucional'],
                            estudiante_data['Contrase√±a'] if 'Contrase√±a' in df_tab3.columns else "0125070109"
                        )
                        
                        with st.spinner("Enviando correo de prueba..."):
                            exito, resultado = enviar_correo_tab3(
                                smtp_server_tab3, smtp_port_tab3, email_usuario_tab3, email_password_tab3,
                                estudiante_data['Email_personal'], asunto_tab3, mensaje, archivos_adjuntos_tab3
                            )
                        
                        if exito:
                            st.success(f"‚úÖ {resultado}")
                            st.balloons()
                        else:
                            st.error(f"‚ùå {resultado}")
            
            elif envio_option == "Env√≠o masivo":
                st.subheader("üì¨ Env√≠o Masivo")
                
                st.warning("‚ö†Ô∏è **Advertencia**: Esta acci√≥n enviar√° correos a todos los estudiantes en el archivo.")
                
                # Mostrar informaci√≥n sobre archivos adjuntos
                if archivos_adjuntos_tab3:
                    st.info(f"üìé Se adjuntar√°n {len(archivos_adjuntos_tab3)} archivo(s) a cada correo")
                
                # Opciones adicionales
                delay_between_emails = st.slider(
                    "Retraso entre correos (segundos):",
                    min_value=1, max_value=10, value=2,
                    help="Retraso para evitar ser marcado como spam",
                    key="delay_tab3"
                )
                
                if st.button("üì§ Iniciar Env√≠o Masivo", type="primary", key="enviar_masivo_tab3"):
                    if not all([smtp_server_tab3, smtp_port_tab3, email_usuario_tab3, email_password_tab3]):
                        st.error("‚ùå Por favor, completa toda la configuraci√≥n SMTP")
                    else:
                        # Inicializar contadores
                        enviados = 0
                        errores = 0
                        
                        # Crear contenedor para el progreso
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        
                        # Contenedor para logs
                        log_container = st.empty()
                        logs = []
                        
                        for index, row in df_tab3.iterrows():
                            try:
                                # Generar mensaje personalizado
                                mensaje = generar_mensaje_personalizado(
                                    row['Nombre'],
                                    row['Correo Institucional'],
                                    row['Contrase√±a'] if 'Contrase√±a' in df_tab3.columns else "0125070109"
                                )
                                
                                # Enviar correo
                                exito, resultado = enviar_correo_tab3(
                                    smtp_server_tab3, smtp_port_tab3, email_usuario_tab3, email_password_tab3,
                                    row['Email_personal'], asunto_tab3, mensaje, archivos_adjuntos_tab3
                                )
                                
                                if exito:
                                    enviados += 1
                                    logs.append(f"‚úÖ {row['Nombre']} - {resultado}")
                                else:
                                    errores += 1
                                    logs.append(f"‚ùå {row['Nombre']} - {resultado}")
                                
                                # Actualizar progreso
                                progress = (index + 1) / len(df_tab3)
                                progress_bar.progress(progress)
                                status_text.text(f"Procesando: {index + 1}/{len(df_tab3)} - Enviados: {enviados} - Errores: {errores}")
                                
                                # Mostrar logs
                                with log_container.container():
                                    st.text_area("Registro de env√≠os:", "\n".join(logs[-10:]), height=200, key=f"log_area_tab3_{index}")
                                
                                # Retraso entre correos
                                time.sleep(delay_between_emails)
                                
                            except Exception as e:
                                errores += 1
                                logs.append(f"‚ùå {row['Nombre']} - Error: {str(e)}")
                        
                        # Resultado final
                        st.success(f"üéâ **Env√≠o completado!**\n- Enviados: {enviados}\n- Errores: {errores}")
                        
                        if enviados > 0:
                            st.balloons()
                        
                        # Descargar log completo
                        log_text = "\n".join(logs)
                        st.download_button(
                            label="üì• Descargar Log Completo",
                            data=log_text,
                            file_name="log_envio_correos.txt",
                            mime="text/plain",
                            key="download_log_tab3"
                        )

# =====================================================
# FOOTER E INFORMACI√ìN ADICIONAL
# =====================================================

st.markdown("---")

# Informaci√≥n adicional en un expander
with st.expander("‚ÑπÔ∏è Instrucciones y Ayuda del Sistema Unificado"):
    
    col_tab1_help, col_tab2_help, col_tab3_help = st.columns(3)
    
    with col_tab1_help:
        st.markdown("### üéØ Sistema Inteligente")
        st.markdown("""
        **Caracter√≠sticas principales:**
        - An√°lisis autom√°tico por progreso acad√©mico
        - Plantillas editables y personalizables
        - Soporte para UVEG y NovaUniversitas
        - Env√≠o inteligente por categor√≠as
        - Editor de mensajes integrado
        
        **Flujo de trabajo:**
        1. Configurar credenciales Gmail
        2. Seleccionar instituci√≥n
        3. Personalizar plantillas (opcional)
        4. Cargar archivo Excel
        5. Elegir an√°lisis autom√°tico o bienvenida
        6. Procesar y enviar correos
        
        **Variables disponibles:**
        - `{nombre}` - Nombre del estudiante
        - `{modulo}` - Nombre del m√≥dulo
        - `{semana}` - Semana actual
        - `{actividades_completadas}` - Lista actividades hechas
        - `{actividades_faltantes}` - Lista actividades pendientes
        """)
    
    with col_tab2_help:
        st.markdown("### üìß Sistema Pr√°cticas")
        st.markdown("""
        **Caracter√≠sticas principales:**
        - Plantillas predefinidas para pr√°cticas
        - Personalizaci√≥n de fechas y datos
        - Soporte para archivos adjuntos
        - Vista previa de correos
        - Env√≠o a m√∫ltiples direcciones
        
        **Flujo de trabajo:**
        1. Configurar SMTP en sidebar
        2. Cargar archivo Excel de estudiantes
        3. Seleccionar plantilla de correo
        4. Personalizar campos espec√≠ficos
        5. Vista previa del mensaje
        6. Ejecutar env√≠o masivo
        
        **Plantillas disponibles:**
        - Bienvenida y primer reto
        - Sesi√≥n s√≠ncrona
        - Env√≠o de grabaci√≥n
        - Mensaje libre personalizable
        """)
    
    with col_tab3_help:
        st.markdown("### üéì Sistema Bienvenida")
        st.markdown("""
        **Caracter√≠sticas principales:**
        - Env√≠o masivo de credenciales
        - Soporte para archivos adjuntos
        - Mensaje de bienvenida personalizado
        - Vista previa y env√≠o de prueba
        - Log detallado de env√≠os
        
        **Flujo de trabajo:**
        1. Configurar SMTP en sidebar
        2. Cargar archivo Excel con credenciales
        3. Seleccionar hoja de datos
        4. Configurar archivos adjuntos
        5. Hacer prueba de env√≠o
        6. Ejecutar env√≠o masivo
        
        **Columnas requeridas en Excel:**
        - `Nombre` - Nombre del estudiante
        - `Email_personal` - Email personal
        - `Correo Institucional` - Email institucional
        - `Contrase√±a` - Contrase√±a temporal
        """)

    st.markdown("### üîß Configuraci√≥n T√©cnica")
    st.markdown("""
    **Para Gmail:**
    - Servidor SMTP: `smtp.gmail.com`
    - Puerto: `587` (Tabs 2 y 3) o `465` (Tab 1)
    - Requiere autenticaci√≥n de 2 factores
    - Usa contrase√±a de aplicaci√≥n (no tu contrase√±a normal)
    
    **Archivos adjuntos:**
    - M√°ximo 5 archivos por correo
    - Tama√±o total recomendado: menor a 10 MB
    - Formatos: PDF, DOC, DOCX, XLS, XLSX, TXT, JPG, PNG, ZIP
    
    **Diferencias entre pesta√±as:**
    - **Pesta√±a 1**: An√°lisis acad√©mico inteligente con plantillas din√°micas
    - **Pesta√±a 2**: Env√≠o masivo para pr√°cticas profesionales con plantillas espec√≠ficas
    - **Pesta√±a 3**: Env√≠o de credenciales de bienvenida con archivos adjuntos
    """)

# Instrucciones espec√≠ficas
st.markdown("### üìù Instrucciones de uso:")

st.markdown("""
#### üéØ **Pesta√±a 1 - Sistema Inteligente:**
1. **Configuraci√≥n:** Completa credenciales Gmail y verifica la conexi√≥n
2. **Instituci√≥n:** Selecciona UVEG o NovaUniversitas seg√∫n corresponda
3. **Plantillas:** Personaliza mensajes seg√∫n tus necesidades
4. **Archivo Excel:** Carga archivo con columnas de estudiantes y actividades
5. **An√°lisis:** Elige an√°lisis autom√°tico por progreso o env√≠o de bienvenida
6. **Env√≠o:** Procesa y env√≠a correos segmentados por categor√≠a

#### üìß **Pesta√±a 2 - Sistema Pr√°cticas:**
1. **Configuraci√≥n:** Completa datos SMTP y del asesor en la barra lateral
2. **Archivo Excel:** Carga archivo con hoja 'Calificaciones'
3. **Plantilla:** Selecciona tipo de mensaje (Bienvenida, Sesi√≥n, Grabaci√≥n, Libre)
4. **Personalizaci√≥n:** Completa fechas y datos espec√≠ficos seg√∫n plantilla
5. **Vista previa:** Revisa c√≥mo se ver√° el correo antes de enviarlo
6. **Env√≠o:** Ejecuta env√≠o masivo con barra de progreso

#### üéì **Pesta√±a 3 - Sistema Bienvenida:**
1. **Configuraci√≥n:** Configura par√°metros SMTP en la barra lateral
2. **Archivo Excel:** Carga archivo con credenciales de estudiantes
3. **Hoja:** Selecciona la hoja correcta del archivo Excel
4. **Adjuntos:** Configura archivos para adjuntar (opcional)
5. **Prueba:** Realiza env√≠o de prueba a un estudiante
6. **Masivo:** Ejecuta env√≠o masivo con log detallado

### üõ°Ô∏è Seguridad:
- Las credenciales no se almacenan permanentemente
- Se recomienda usar cuentas de correo dedicadas para env√≠os masivos
- Verifica siempre el contenido antes de enviar
- Usa contrase√±as de aplicaci√≥n, nunca tu contrase√±a principal
""")

# Footer
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: #666;'>
        <p><strong>Sistema Integral de Correos Acad√©micos</strong></p>
        <p>UVEG & NovaUniversitas - Plataforma Unificada</p>
        <p>Desarrollado para Coordinaci√≥n Virtual y Asesores Acad√©micos</p>
        <p>Versi√≥n 3.0 - Integraci√≥n Completa de Sistemas</p>
    </div>
    """,
    unsafe_allow_html=True
)
